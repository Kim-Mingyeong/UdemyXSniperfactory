{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateMoviestore } from \"../redux/movie-store\";\nexport default function useFetchMovies() {\n  _s();\n  const [loading, setLoading] = useState(true); //로딩 상태\n  const [error, setError] = useState(\"\"); //Error 상태\n  const [movies, setMovies] = useState([]); //영화 데이터를 가지고 있는 배열 상태\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=8.8&sort_by=year`).then(response => response.json()).then(json => {\n      setMovies(json.data.movies);\n      dispatch(updateMoviestore({\n        movies: json.data.movies\n      }));\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []); //영화 데이터를 받아 올때 1번만 실행\n\n  return {\n    loading,\n    error,\n    movies\n  };\n}\n_s(useFetchMovies, \"Skpz4BX/DT2MdMEqbpSZ4j74Mck=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["useEffect","useState","useDispatch","updateMoviestore","useFetchMovies","_s","loading","setLoading","error","setError","movies","setMovies","dispatch","fetch","then","response","json","data","catch"],"sources":["/Users/KimDaeHee_off/Documents/[유데미x스나이퍼팩토리] 10주 완성-프로젝트 캠프 React/Assn./UdemyXSniperfactory/movies-app/src/hooks/useFetchMovies.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { updateMoviestore } from \"../redux/movie-store\";\n\nexport default function useFetchMovies() {\n  const [loading, setLoading] = useState(true); //로딩 상태\n  const [error, setError] = useState(\"\"); //Error 상태\n  const [movies, setMovies] = useState([]); //영화 데이터를 가지고 있는 배열 상태\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetch(\n      `https://yts.mx/api/v2/list_movies.json?minimum_rating=8.8&sort_by=year`\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        setMovies(json.data.movies);\n        dispatch(updateMoviestore({ movies: json.data.movies }));\n        setLoading(false);\n      })\n      .catch((error) => {\n        setError(error);\n        setLoading(false);\n      });\n  }, []); //영화 데이터를 받아 올때 1번만 실행\n\n  return { loading, error, movies };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,sBAAsB;AAEvD,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAMW,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACda,KAAK,CACF,wEACH,CAAC,CACEC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;MACdL,SAAS,CAACK,IAAI,CAACC,IAAI,CAACP,MAAM,CAAC;MAC3BE,QAAQ,CAACT,gBAAgB,CAAC;QAAEO,MAAM,EAAEM,IAAI,CAACC,IAAI,CAACP;MAAO,CAAC,CAAC,CAAC;MACxDH,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,CACDW,KAAK,CAAEV,KAAK,IAAK;MAChBC,QAAQ,CAACD,KAAK,CAAC;MACfD,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,OAAO;IAAED,OAAO;IAAEE,KAAK;IAAEE;EAAO,CAAC;AACnC;AAACL,EAAA,CAvBuBD,cAAc;EAAA,QAInBF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}